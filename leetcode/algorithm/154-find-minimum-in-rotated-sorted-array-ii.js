/**
 * 154. 寻找旋转排序数组中的最小值 II
 *
 * 已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,4,4,5,6,7] 在变化后可能得到：
 *      若旋转 4 次，则可以得到 [4,5,6,7,0,1,4]
 *      若旋转 7 次，则可以得到 [0,1,4,4,5,6,7]
 *
 * 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。
 * 给你一个可能存在 重复 元素值的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。
 */

/**
 * 理论上折半查找有几种情况
 *  1. 中间点比右侧节点大,那么说明最小点肯定在右边
 *  2. 中间点比右侧节点小,说明最小点在左侧
 * @param {number[]} nums
 * @return {number}
 */
var findMin = function (nums) {
  let len = nums.length;
  if (len === 1) return nums[0];

  let l = 0,
    r = len - 1;

  while (l < r) {
    // mid 还是需要每次重新计算的~~~
    let mid = Math.floor((l + r) / 2);
    if (nums[mid] > nums[r]) {
      // 第一种情况
      l = mid + 1;
    } else if (nums[mid] < nums[r]) {
      // 第二种情况
      r = mid;
    } else {
      // 不大于,不小于,那就是等于~~~
      // 由于重复元素,所以不能直接忽略一部分元素,由于它们的值相同所以无论 r 是不是最小值,都有一个它的「替代品」 mid ,因此可以把右端点进一位
      r--;
    }
  }
  return nums[l];
};

/**
 * 执行用时：104 ms, 在所有 JavaScript 提交中击败了9.57%的用户
 * 内存消耗：38.8 MB, 在所有 JavaScript 提交中击败了86.33%的用户
 */
