/**
 * 96. 不同的二叉搜索树
 * 
 * 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
 */

/**
 * 二叉搜索树：
 *      左子节点总是小于它的根节点
 *      右子节点总是大于它的根节点
 * 
 * 思路：
 *      给定一个有序序列，为了构建出一颗二叉树，可以遍历每个数字 i，将该数字作为树根，将1-（i-1）序列作为左子树，将（i+1）-n 序列作为右子树
 * 然后可以按照同样的方式递归构建左右子树
 * 
 * 算法:
 *      假设 n 个节点存在的二叉树排序的个数是 G(n),令 f(i) 为以i为根的二叉搜索树个数,则: G(n) = f(1)+f(2)+f(3)+...+ f(n)
 *      当i为根节点时，其左子树节点个数为i-1个，右子树节点为n-i，则 f(i) = G(i-1)* G(n-i)
 *      最后: G(n)=G(0)∗G(n−1)+G(1)∗(n−2)+...+G(n−1)∗G(0)
 * @param {number} n
 * @return {number}
 */
var numTrees = function(n) {
    let G = new Array(n + 1).fill(0);
    G[0] = 1;
    G[1] = 1;

    for (let i = 2; i <= n; ++i) {
        for (let j = 1; j <= i; ++j) {
            G[i] += G[j - 1] * G[i - j];
        }
    }
    return G[n];
};
console.log(numTrees(3));

/**
 * 第三方思路
 * 
 * 经典的分治思路题目
 * 对于整数n,可以离散的分成左右两部分.我们不妨设其分别为AB,那么问题就转化成A和B所能组成的BST的数量的笛卡尔积.而对于A和B以及原问题规模没有不同
 * 
 * 具体算法:
 *      1. 生成一个[1:n + 1]的数组
 *      2 遍历一次数组,对于每个数组项,执行
 *          1. 都假设是一个断点.断点左侧是A,右侧是B
 *          2. 那么A就是i-1个数,B就是 n - 1 个数
 *          3. 递归,并将A和B的结果相乘即可
 */