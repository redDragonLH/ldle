/**
 * 802. 找到最终的安全状态
 *
 * 在有向图中，以某个节点为起始节点，从该点出发，每一步沿着图中的一条有向边行走。如果到达的节点是终点（即它没有连出的有向边），则停止。
 *
 * 对于一个起始节点，如果从该节点出发，无论每一步选择沿哪条有向边行走，最后必然在有限步内到达终点，则将该起始节点称作是 安全 的。
 *
 * 返回一个由图中所有安全的起始节点组成的数组作为答案。答案数组中的元素应当按 升序 排列。
 *
 * 该有向图有 n 个节点，按 0 到 n - 1 编号，其中 n 是 graph 的节点数。图以下述形式给出：graph[i] 是编号 j 节点的一个列表，满足 (i, j) 是图的一条有向边。
 */

/**
 * 获取所有安全起始点
 *
 * 那就肯定会有无限循环,最重要的就是确定无限循环路径,和无限循环路径的重复分支,进入结果,不过去重应该可以解决但是增加耗时和复杂度
 *
 * @param {number[][]} graph
 * @return {number[]}
 */
var eventualSafeNodes = function (graph) {
  // 从零开始遍历,用递归感觉增加耗时,不用就得用复杂结果保存中间过程
};

const deep = (graph, path, pathArr) => {
    
};
