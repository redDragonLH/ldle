/**
 * 2216. 美化数组的最少删除数
 * 
 * 给你一个下标从 0 开始的整数数组 nums ，如果满足下述条件，则认为数组 nums 是一个 美丽数组 ：
 *  * nums.length 为偶数
 *  * 对所有满足 i % 2 == 0 的下标 i ，nums[i] != nums[i + 1] 均成立
 * 
 * 注意，空数组同样认为是美丽数组。
 * 你可以从 nums 中删除任意数量的元素。当你删除一个元素时，被删除元素右侧的所有元素将会向左移动一个单位以填补空缺，而左侧的元素将会保持 不变 。
 * 返回使 nums 变为美丽数组所需删除的 最少 元素数目。
 */

/**
 * 也就是有一个坏元素,就立即删除一个
 * 然后再判断数量是否合格,不合格就删一个,随便删也没问题
 * 
 * 当数组 nums 中存在坏下标时,找到最小的那个坏下标记为i0,那么:
 *  * 当 i < i0 时,i 一定不是 「坏下标」
 *  * 当 i > i0 时, i 可能是「坏下标」,也可能不是「坏下标」.
 * 
 * 为了将 i0 变得不是坏下标,必须删除元素,根据删除元素的位置i 与 i0 的关系,有三种情况
 *  * i>i0 + 1
 *  * i < i0
 *  * i = i0 或 i = i0+1
 * 
 * 根据删除的情况,
 *  * 删除 i>i0+1位置的元素是没必要的;
 *  * 删除 i < i0与i =i0 影响是一样的
 * @param {number[]} nums
 * @return {number}
 */
var minDeletion = function(nums) {
    let ans = 0, n = nums.length, check = true;
    for (let i = 0; i + 1 < n; i++) {
        // 如果相等就减去,并且check 不变,仍是偶数
        if (nums[i] == nums[i + 1] && check) {
            ans++;
        } else {
            check = !check;
        }
    }
    // 判断长度是否是偶数
    if ((n - ans) % 2 != 0) {
        ans++;
    }
    return ans;
};
/**
 * 
 */